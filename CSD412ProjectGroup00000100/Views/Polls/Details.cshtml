@model CSD412ProjectGroup00000100.Models.ViewPoll

@{
    ViewData["Title"] = "Details";
}

<h1>Details</h1>
<div>
    <h4>Poll</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.CurrentPoll.Name)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.CurrentPoll.Name)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.CurrentPoll.Description)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.CurrentPoll.Description)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.CurrentPoll.State)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.CurrentPoll.State)
        </dd>
    </dl>
</div>
<div>
    <a asp-controller="Items" asp-action="ViewPollItems" asp-route-pollId="@Model.CurrentPoll.PollId">ViewItems</a> |
    <a asp-action="AllPolls">Back to List</a> |
    <a asp-action="Index">Back to myList</a> |
    @if (@Model.CurrentPoll.State == false)
    {
        <a asp-controller="Items" asp-action="Create" asp-route-pollId="@Model.CurrentPoll.PollId">| Add Item</a>
        <a asp-controller="Polls" asp-action="State" asp-route-id="@Model.CurrentPoll.PollId">| change state</a>
    }
</div>
<h1>Items</h1>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Items.FirstOrDefault().Poll)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Items.FirstOrDefault().Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Items.FirstOrDefault().Description)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.Items)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Poll.PollId)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Description)
                </td>
                <td>
                    <a asp-controller="Items" asp-action="Details" asp-route-id="@item.ItemId">Details</a>
                    @if (@Model.CurrentPoll.State == false)
                    {
                        <a asp-controller="Items" asp-action="Edit" asp-route-id="@item.ItemId">| Edit</a>
                        <a asp-controller="Items" asp-action="Delete" asp-route-id="@item.ItemId">| Delete </a>
                    }
                    else if (@Model.ShowResult == false)
                    {
                        <a asp-controller="Votes" asp-action="Create" asp-route-itemId="@item.ItemId">| Vote</a>
                    }
                    else
                    {
                        // add the percentage of votes per item
                    }
                </td>
            </tr>
        }
    </tbody>
</table>
@if (@Model.ShowResult == true)
{
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.6.0/Chart.min.js" type="text/javascript"></script>
    <script src="https://code.jquery.com/jquery-1.11.3.min.js"></script>


    <canvas id="myChart" style="padding: 0;margin: auto;display: block; "> </canvas>

    <script>
        var myLabels = [];
        var myColor = [];
        var myData = [];

        @foreach (var d in ViewBag.labels)
        {
            @:myLabels.push("@d");
        }
        @foreach (var d in ViewBag.data)
        {
            @:myData.push("@d");
        } @foreach (var d in ViewBag.Color)
        {
            @:myColor.push("@d");
        }
        var ctx = document.getElementById('myChart').getContext('2d');
        var myChart = new Chart(ctx, {
            type: 'pie',
            data: {
                labels: myLabels,
                datasets: [{
                    label: 'Poll Results',
                    backgroundColor: myColor,
                    borderColor: 'rgb(0, 0, 0)',
                    data: myData
                }]

          },
            options: {}
        });
    @*$.ajax({
        type: "pie",
        url: "/Chart/ShowPollChart/@ViewData["PollId"]",
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (chData) {
            var aData = chData;
            var aLabels = aData[0];
            var aDatasets1 = aData[1];
            var dataT = {
                labels: aLabels,
                datasets: [{
                    label: "Test Data",
                    data: aDatasets1,
                    fill: false,
                    backgroundColor: ["rgba(54, 162, 235, 0.2)", "rgba(255, 99, 132, 0.2)", "rgba(255, 159, 64, 0.2)", "rgba(255, 205, 86, 0.2)", "rgba(75, 192, 192, 0.2)", "rgba(153, 102, 255, 0.2)", "rgba(201, 203, 207, 0.2)"],
                    borderColor: ["rgb(54, 162, 235)", "rgb(255, 99, 132)", "rgb(255, 159, 64)", "rgb(255, 205, 86)", "rgb(75, 192, 192)", "rgb(153, 102, 255)", "rgb(201, 203, 207)"],
                    borderWidth: 1
                }]
            };
            var ctx = $("#myChart").get(0).getContext("2d");
            var myNewChart = new Chart(ctx, {
                type: 'bar',
                data: dataT,
                options: {
                    responsive: true,
                    title: { display: true, text: 'CHART.JS DEMO CHART' },
                    legend: { position: 'bottom' },
                    scales: {
                        xAxes: [{ gridLines: { display: false }, display: true, scaleLabel: { display: false, labelString: '' } }],
                        yAxes: [{ gridLines: { display: false }, display: true, scaleLabel: { display: false, labelString: '' }, ticks: { stepSize: 50, beginAtZero: true } }]
                    },
                }
            });
        }
    });*@
    </script>

}